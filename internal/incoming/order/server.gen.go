// Package order provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package order

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all orders
	// (GET /orders)
	GetOrders(w http.ResponseWriter, r *http.Request, params GetOrdersParams)
	// Place a new order
	// (POST /orders)
	PostOrders(w http.ResponseWriter, r *http.Request)
	// Get information about a specific order
	// (GET /orders/{order_id})
	GetOrder(w http.ResponseWriter, r *http.Request, orderId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all orders
// (GET /orders)
func (_ Unimplemented) GetOrders(w http.ResponseWriter, r *http.Request, params GetOrdersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Place a new order
// (POST /orders)
func (_ Unimplemented) PostOrders(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get information about a specific order
// (GET /orders/{order_id})
func (_ Unimplemented) GetOrder(w http.ResponseWriter, r *http.Request, orderId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetOrders operation middleware
func (siw *ServerInterfaceWrapper) GetOrders(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrdersParams

	// ------------- Optional query parameter "customer_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "customer_id", r.URL.Query(), &params.CustomerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customer_id", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrders(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostOrders operation middleware
func (siw *ServerInterfaceWrapper) PostOrders(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostOrders(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetOrder operation middleware
func (siw *ServerInterfaceWrapper) GetOrder(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "order_id" -------------
	var orderId string

	err = runtime.BindStyledParameterWithOptions("simple", "order_id", chi.URLParam(r, "order_id"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrder(w, r, orderId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/orders", wrapper.GetOrders)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/orders", wrapper.PostOrders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/orders/{order_id}", wrapper.GetOrder)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RV23LbNhD9FQ7aR0LiXSLf3MiJnE5id+LxJRmPBwSWMlISYADQqcejf+8AlHWX7bTJ",
	"kyhgL2fPnl08IiqbVgoQRqPiEWl6Bw1xn1IxULfcQHOr4FsH2tjTVskWlOHgbARpwP7CP6Rpa3v2BTVE",
	"6buG1LX8jnxUEkEEQT4ibVsDuvGReWgBFUgbxcUMzec+suG5Ama9XcSVlSy/AjVo7m/C0a0UGl6HZwuB",
	"vwHw/+I5yAzttJGNRcy2AWWkGlUsHWOaR4CTMspwDuUIh3kSVRmQnICFyUhCx3mV4gqsGS0Bk6giOEui",
	"rIR8lCaZQ1ZJ1RCDCtR1nKGdenxkOXOYlh+/K6hQgX4brpo/XHR+uKft82VQohR52OFovdandM9Rdqh7",
	"VAExXIpbRsxOG6MginEY4CA8D6MiCIog+Iz81XF0HqZF3B+vs2JjYcMb2EfNM12qxlXMUgo4rmiIE5Yz",
	"nMdBhqs0zNIyj0Y5pchH+YgmSZqFeAx5hZMoI5hkSYBzlo2jMB9DSMtf3aUFnzttWg7NTnFB+H4UXp7H",
	"5+Pw6k/88fTjMb4aXceTyejtu8uL4C3yFyZXHybTD5fT3uTsYno8TrNgGkfJp6XJ9cX1m8nkqDdJkuP3",
	"l5Pr6V/TN9PPe6bLR9oQ072yvoXt83pb1uhvCWiZ62VNrkCts9TfWXQ1GFjlokRQqNcOuLhtlZwp0Hp5",
	"1taEAttLgTPQG4PwA00/3G/LExeVtHEMN7W9OrU+3tHZCfLRPSjNpUAFCgbhIHJQWhCk5ahA8SAchMhH",
	"LTF3Dkmfzn3OwG04O6uO3xOGCvQOzGlvYZ0UacA48y+PiIGmiremT3Z+B95TyzzOPGYNGy5Ae2b9SlZe",
	"n9JTYDolHMHcRvjWgXpA/mK9b/W/Z+c/Ltm4Guc0LmOc0TjGCbAQl2OgeJSmGY0DWlGSvmJ85/6+omve",
	"cLNdruia8keKdUE2ymRQka42qEiDJRAuDMxAHUIiq0rDDhT9N29bYAsgB/L3rvsB7Mt/Y2e1V6jTThQE",
	"brdLYUA4Gdl3mFMnpOFXbTE+rgV/cQDWBscpfrPaI+G5aVgR7NaH7pqGqIdeth6p6+Wlj1qp98j7TOqV",
	"vhcv4R+SPfzcYlZv7LzfchvMhT892WHi+kXhNiiwLc7O7C7ziCfge8+bu1+0Y/j4tIHnL+6K16wKzmzv",
	"rD5dXM9IOyKKwz08SdTuqDWFrh6A1SthVAfrmt0e2F8u02fJPhH9QuFSeKSUnfGIp7mY1bDG76Zm+T6X",
	"FiivOF06WS9Q9/vJPVOSddT98VGnalSgO2NaXQyHpOWDxfYcUNkM70O0u0g+GTKz5G076/58sC/Izfzf",
	"AAAA//9nWUxZYgwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
